language parser(go);

disableSyntax = ["Lookahead", "Arrow", "Templates", "NestedChoice"]

:: lexer

a: /a/
b: /b/
c: /c/
d: /d/

:: parser

input: A1 B1 C1 D1 E1 F1;

A1: «(?= laA)» a;
# err: syntax Lookahead is not supported

laA: a b c d;

B1: «(?= laB)» b;
# err: syntax Lookahead is not supported

laB: a b d;

C1: «(?= laC)» c;
# err: syntax Lookahead is not supported

laC: laA | laB ;

# Note: reusing laC again.

D1: «(?= laC)» d;
# err: syntax Lookahead is not supported

E1: «(?= laE)» d;
# err: syntax Lookahead is not supported

laE: a+ b;

F1: «(?= laF)» d;
# err: syntax Lookahead is not supported

laF «-> Thing»: laE b;
# err: syntax Arrow is not supported

%flag T;

«g»<T>: F1;
# err: templates are not supported

h : F1 | (F1 F1) | «(F1 | F1 F1)»;
# err: parenthesized Choice operator is not supported
